.. _intro:

Introduction
=============

Creation of a separate implementation of the VAMDC-TAP node software in Java pursuied several goals:

*	Multiple implementations insure that standards are complete and contain no implementation-specific elements

*	Give end-users a choice of the implementation language

*	Architectural design of the XML generator based on the schema rather than on a non-hierarchical
	keywords dictionary (as in Python/Django node software - see below the :ref:`diff` section)


Used software
-----------------------------------------------

The following open-source libraries were used as Java node software components:

* JAXB RI for XML schema mapping and document output

* Apache Cayenne ORM framework for database access

* MySQL database (any relational database can be used)

* ANTLR generated query parser with slightly modified SQLite syntax

* Oracle Jersey JAX-RS implementation

* Apache Tomcat application server


VAMDC common components
-----------------------------------------------

Following components, developed within the VAMDC project are part of Java VAMDC node software implementation.

* Dictionaries of standard keywords, 
	used in a query;

* Query parsing library, 
	providing object-oriented view on a query string;

* Query mapping library,
	providing basic support for queries mapping to node database queries.

* XSAMS helper library, 
	providing convenience methods for output XML generator implementation;

* Web application, .war archive integrating all libraries

* VAMDC-TAP service validation tool, may be used for node software testing


Node-specific components
-----------------------------

In Java node software each node installation requires creating two code blocks:

#. Database mapping classes with Apache Cayenne.
	This task is well described in Cayenne documentation [CAYDOC]_ . Fancy graphical tool is provided.
	
#. Node plugin, 
	responsible for query translation into internal queries 
	and building appropriate XSAMS tree from the database access objects,
	fetched using mapped queries.

	
This document is dedicated mostly to describe how to implement and deploy a node plugin.

For the rough estimation of the required amount of node-specific code, following numbers should be considered:

*	BASECOL node plugin - total of ~1600 lines of code;

*	KIDA node plugin - total of ~1500 lines of code;

For all nodes those numbers do not include the autogenerated database model size.

Comparison with the python/django node software
----------------------------------------------------

The paragraph provides a comparison between the Java-Implementation and
the Python/Django node software

Common features
++++++++++++++++++

* Work as a web application behind a web server

* Use object-relational mapping for database access

* Try to minimize the amount of node-specific code

* Node-specific part works as a plugin

.. _diff:

Differencies
++++++++++++++

* The main architectural difference
	between the the Java implementation and the Python/Django one is the XML generator.
	
	Java version uses Document Object Model (DOM) mapping of the XML, node plugin needs to build XSAMS blocks
	as trees of related objects.
	
	Python version provides a generator with the defined and limited set of loops and anchors("returnables").
	Node developer needs to study not only the XSAMS documentation, but also to look through 
	a huge and not well documented list of *returnables* keywords 
	to understand where and how to put his data.
	
	
	The use of DOM XML mapping has some advantages and disadvantages:
	
	
	+	On a good side, it gives much more flexibility in document generation.
	
	+	Additional benefit is that it helps to keep the output document error-free,
		thanks to compile-time type checks.
	
	+	XML DOM mapping provided is complete: even if node wishes to put the data in
		a rarely used element of XSAMS,
		it can without the need to output XML blocks as the plain text.
	
	-	On a bad side, task of building a document tree results in a 
		slightly bigger amount of node-specific code.
	
	
	For the task of implementing XSAMS blocks builder, existing builders of KIDA, BASECOL and VALD are
	useful as good examples.
	
	
* Java implementation doesn't (yet) support document streaming, 
	it requires to have a whole document tree to be built in memory
	and then streamed in a response.
	
	Thus increasing memory footprint, it allows to not strictly follow the document generation order,
	i.e. export some species and states, then export processes, while exporting some more species and states.
	
	Also, this way it is easier to verify the document integrity.
	
* Java implementation doesn't provide an import tool from ASCII files into a relational database
	
	Well, there was no need for such a tool. You may use Python one.

* Java implementation provides more sophisticated query parsing and mapping support

Node implementation
---------------------

So, implementing a node using the Java Node Software would require the following steps:

*	Create database model and classes, as described in the :ref:`datamodel` section.

	After completing this step you will be able to access your database in a convenient way
	from any Java software you develop. For the details, see the Apache Cayenne documentation. [CAYDOC]_

*	Set up the project for your plugin, understand the query process and interaction of the node and the plugin.
	See the :ref:`plugin` section.

*	Create XSAMS tree blocks constructors and builders, as described in the :ref:`XSAMSGen` section

	Here you might need help from the person responsible for database to figure out what XSAMS elements
	are appropriate for your database content.

	During this step you will be able to test your node plugin: :ref:`plugintest`.
	Try to eliminate any validation errors.
	The result would be the same for all queries, but it is normal.

*	Define the supported restrictables and create mapping classes as described in the :ref:`QueryHandling` section.

	When this step will be accomplished, you are more than half way through the implementation process.
	You can test different queries and check if you are getting relevant XSAMS documents as the result.
	
*	The last development step would be to implement the query metrics 
	to be fully compliant with the VAMDC-TAP standard.
	See the :ref:`metrics` section for the implementation details.
	
*	After the node plugin is working, ask your servers manager to deploy the Java Node software 
	on the application server, as it is described in the :ref:`deploy` section.
	Test again using the VAMDC-TAP Validator in the network mode.
	